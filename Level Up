using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum Player_UnitType { Churu, Warrior, Mini, Ballet, Bread, Magic }
public enum Enemy_UnitType { Basic, Warrior, Ballet, Bread, Magic }

public class UnitManager : MonoBehaviour
{
    DataManager dataManager;

    public readonly int Max_Level = 4;

    void Awake()
    {
        dataManager = GameManager.Instance.DataManager;
    }

    public int Get_Unit_Level(int index)
    {
        return index switch
        {
            0 => dataManager.Churu_Level,
            1 => dataManager.Warrior_Level,
            2 => dataManager.Mini_Level,
            3 => dataManager.Ballet_Level,
            4 => dataManager.Bread_Level,
            5 => dataManager.Magic_Level,
            _ => 0
        };
    }

    public void Set_Unit_Level(int index, int level)
    {
        switch (index)
        {
            case 0:
                {
                    dataManager.Churu_Level = level;
                    break;
                }
            case 1:
                {
                    dataManager.Warrior_Level = level;
                    break;
                }
            case 2:
                {
                    dataManager.Mini_Level = level;
                    break;
                }
            case 3:
                {
                    dataManager.Ballet_Level = level;
                    break;
                }
            case 4:
                {
                    dataManager.Bread_Level = level;
                    break;
                }
            case 5:
                {
                    dataManager.Magic_Level = level;
                    break;
                }
        }
    }

    // 플레이어 유닛 정보를 불러옴, 기본 레벨 값은 0
    public UnitData Get_Player_UnitData(Player_UnitType player_UnitType, int level = 0)
    {
        return player_UnitType switch
        {
            // .Set_Level() 이전까진 레벨0 데이터, 자유롭게 수정 가능
            Player_UnitType.Churu => new UnitData()
            {
                Name = "Churu_Cat",
                UnitId = 1,
                Hp = 20,
                Attack = 4,
                Skill = true,
                Special = true,
                Power = 15
            }.Set_Churu(15).Set_SkillAttack(5).Set_Level(player_UnitType, level),
            Player_UnitType.Warrior => new UnitData()
            {
                Name = "Warrior_Cat",
                UnitId = 2,
                Hp = 10,
                Attack = 2,
                Skill = false,
                Special = false,
                Power = 5
            }.Set_Churu(5).Set_Level(player_UnitType, level),
            Player_UnitType.Mini => new UnitData()
            {
                Name = "Mini_Cat",
                UnitId = 3,
                Hp = 5,
                Attack = 1,
                Skill = true,
                Special = false,
                Power = 3
            }.Set_Churu(3).Set_Level(player_UnitType, level),
            Player_UnitType.Ballet => new UnitData()
            {
                Name = "Ballet_Cat",
                UnitId = 4,
                Hp = 8,
                Attack = 0,
                Skill = true,
                Special = false,
                Power = 6
            }.Set_Heal(2).Set_Churu(6).Set_Level(player_UnitType, level),
            Player_UnitType.Bread => new UnitData()
            {
                Name = "Bread_Cat",
                UnitId = 5,
                Hp = 25,
                Attack = 1,
                Skill = false,
                Special = false,
                Power = 8
            }.Set_Churu(8).Set_Level(player_UnitType, level),
            Player_UnitType.Magic => new UnitData()
            {
                Name = "Magic_Cat",
                UnitId = 6,
                Hp = 18,
                Attack = 2,
                Skill = true,
                Special = true,
                Power = 20
            }.Set_Churu(20).Set_SkillAttack(5).Set_Level(player_UnitType, level),
            _ => new UnitData()
        };
    }

    // Enemy 데이터를 관리하기 위해 따로 만들었음
    // Get_Player_UnitData()와 작동원리나 사용방법은 비슷
    public UnitData Get_Enemy_UnitData(Enemy_UnitType enemy_UnitType)
    {
        return enemy_UnitType switch
        {
            Enemy_UnitType.Basic => new UnitData()
            {
                Name = "잡몹",
                Hp = 5,
                Attack = 1,
                MoveSpeed = 1,
                Skill = false,
                Special = false,
                Power = 5
            },
            Enemy_UnitType.Warrior => new UnitData()
            {
                Name = "냥이병정",
                Hp = 10,
                Attack = 2,
                MoveSpeed = 1,
                Skill = false,
                Special = false,
                Power = 5
            },
            Enemy_UnitType.Ballet => new UnitData()
            {
                Name = "발레냥",
                Hp = 8,
                Attack = 1,
                MoveSpeed = 1,
                Skill = false,
                Special = false,
                Power = 5,
            },
            Enemy_UnitType.Bread => new UnitData()
            {
                Name = "식빵냥",
                Hp = 25,
                Attack = 1,
                MoveSpeed = 1,
                Skill = false,
                Special = false,
                Power = 5,
            },
            Enemy_UnitType.Magic => new UnitData()
            {
                Name = "적마법냥",
                Hp = 18,
                Attack = 2,
                MoveSpeed = 1,
                Skill = true,
                Special = true,
                Power = 20
            },
            _ => new UnitData()
        };
    }
}

// 유닛 데이터를 저장하는 공통 클래스
public class UnitData
{
    public string Name;                          // 
    public int UnitId;                           // 
    public int Hp;                               // 
    public int Attack;                           // 
    public int SkillAttack;                      // 마법공격력(마법타입 전용)
    public float MoveSpeed;                      // 
    public bool Skill;                           // 
    public bool Special;                         // 
    public int Power;                            // 
    public int Heal;                             // 힐 수치(Ballet 전용)
    public int Churu;                            // 소모 츄르
    public int Cost = 50;                        // 강화비용
    public int ReinforceProbability = 80;    // 강화확률

    // 공통으로 쓰이지 않는 변수는 함수를 통해 값을 입력해줌
    public UnitData Set_Heal(int heal)
    {
        Heal = heal;
        return this;
    }

    public UnitData Set_Churu(int churu)
    {
        Churu = churu;
        return this;
    }

    public UnitData Set_SkillAttack(int skillAttack)
    {
        SkillAttack = skillAttack;
        return this;
    }

    // 플레이어 유닛 타입에 따라 레벨에 맞는 공식 적용
    public UnitData Set_Level(Player_UnitType player_UnitType, int level)
    {
        // 최소최대 레벨 범위 제한
        level = Mathf.Clamp(level, 0, GameManager.Instance.UnitManager.Max_Level);

        for (int i = 0; i <= level; i++)
        {
            // 레벨 기본값 0에서는 작동하는게 없어서 무시하고 건너뜀
            if (i == 0)
                continue;

            // 레벨업 공통 능력치 상승
            Cost += 50;
            ReinforceProbability -= 20;

            switch (i)
            {
                case 1:
                    {
                        Hp += 1;
                        Attack += 1;
                        SpecialStatsIncrease();
                        break;
                    }
                case 2:
                    {
                        Hp += 1;
                        Churu += 1;
                        break;
                    }
                case 3:
                    {
                        Hp += 1;
                        Attack += 1;
                        SpecialStatsIncrease();
                        break;
                    }
                case 4:
                    {
                        Hp += 1;
                        Attack += 1;
                        Churu += 1;
                        SpecialStatsIncrease();
                        break;
                    }
            }
        }
        return this;

        // 유닛 타입별 특수 능력치 상승
        void SpecialStatsIncrease()
        {
            switch (player_UnitType)
            {
                case Player_UnitType.Churu:
                    {
                        SkillAttack += 1;
                        break;
                    }
                case Player_UnitType.Ballet:
                    {
                        Heal += 1;
                        break;
                    }
                case Player_UnitType.Magic:
                    {
                        SkillAttack += 1;
                        break;
                    }
            }
        }
    }
}

